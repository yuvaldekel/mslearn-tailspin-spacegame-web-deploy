trigger:
  - '*'
  
variables:
    buildConfiguration: 'Release'
    releaseBranchName: 'all-tests'
    dotnetSdkVersion: '6.x'

schedules:
  - cron: '35 15 * * *'
    displayName: 'Deploy every day at 3 A.M.'
    branches:
      include:
      - all-tests
    always: false 
  
stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs: 
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'ubuntu-20.04'
        demands:
        - npm
  
      variables:
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  
      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'
  
      - task: Npm@1
        displayName: 'Run npm install'
        inputs:
          verbose: false
  
      - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
        displayName: 'Compile Sass assets'
  
      - task: gulp@1
        displayName: 'Run gulp tasks'
  
      - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
        displayName: 'Write build info'
        workingDirectory: $(wwwrootDir)
  
      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
  
      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Install .NET tools from local manifest'
        inputs:
          command: custom
          custom: tool
          arguments: 'restore'
    
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*.Tests.csproj'
        
      - task: DotNetCoreCLI@2
        displayName: 'Create code coverage report'
        inputs:
          command: custom
          custom: tool
          arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
        
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
      
  
      - task: DotNetCoreCLI@2
        displayName: 'Publish the project - $(buildConfiguration)'
        inputs:
          command: 'publish'
          projects: '**/*.Web.csproj'
          publishWebProjects: false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true
  
      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: drop
  
  - stage: 'Dev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Build
    condition: |
      and
      (
        succeeded(),
        eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
      )
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameDev)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
  
  - stage: 'Test'
    displayName: 'Deploy to the test environment'
    dependsOn: Dev
    condition: eq(variables['Build.Reason'], 'Schedule')
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: test
      variables:
      - group: 'Release'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameTest)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
    - job: RunUITests
      dependsOn: Deploy
      displayName: 'Run UI tests'
      pool:
        vmImage: 'windows-2019'
      variables:
      - group: 'Release'
      steps: 
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'
      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration)'
          publishTestResults: true
          projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
            
  
  - stage: 'Staging'
    displayName: 'Deploy to the staging environment'
    dependsOn: Test
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: staging
      variables:
      - group: 'Release'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Tailspin - Space Game'
                appName: '$(WebAppNameStaging)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
    - job: RunLoadTests
      dependsOn: Deploy
      displayName: 'Run load tests'
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
      - group: Release
      steps:
      - script: |
          wget -c archive.apache.org/dist/jmeter/binaries/apache-jmeter-$(jmeterVersion).tgz
          tar -xzf apache-jmeter-$(jmeterVersion).tgz
        displayName: 'Install Apache JMeter'
      - script: apache-jmeter-$(jmeterVersion)/bin/./jmeter -n -t LoadTest.jmx -o Results.xml -Jhostname=$(STAGING_HOSTNAME)
        displayName: 'Run Load tests'
      - script: |
          sudo apt-get update
          sudo apt-get install xsltproc
          xsltproc JMeter2JUnit.xsl Results.xml > JUnit.xml
        displayName: 'Transform JMeter output to JUnit'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: JUnit.xml